[{"id":"916d7106.6e929","type":"rpi-sensehat in","z":"f37e2664.0c81d8","name":"HAT Input","motion":false,"env":true,"stick":true,"x":66.85711669921875,"y":136.4285659790039,"wires":[["bfe2b6a6.8dace"]]},{"id":"9fba2057.6045e","type":"rpi-sensehat out","z":"f37e2664.0c81d8","name":"HAT Display","x":813.5714111328125,"y":97.42857360839844,"wires":[]},{"id":"10a1f00c.ef5e1","type":"function","z":"f37e2664.0c81d8","name":"Process Joystick","func":"// Check if the joystick has been pushed,\n// then return direction string as payload\n// Initialize the defalut message string and get joystick\nvar hatTopic = String(msg.topic);\nvar now = new Date()\nvar jSw = \"\";\nvar jDir = String(msg.payload.key);\n\n// Default to text and background colors from context unless\n// unless overridden in the case statement processing\n\nvar textColor = context.flow.text;\nvar bgColor = context.flow.background;\n\n// Process each joystick directtion\n\n if (msg.payload.state === 0){\n switch (jDir){\n case \"ENTER\":\n // Enter shows last alert\n jSw = context.flow.alert;\n break;\n case \"UP\":\n // Up shows local temp and pressure\n jSw = String(Math.round((context.flow.hatTemp * 9/5) + 32 ))+ \"F \" + String(Math.round(context.flow.hatPressure))+ \"mB\";\n break;\n case \"DOWN\":\n // Down shows local time\n jSw = now.toLocaleTimeString();\n break;\n default:\n jSw = msg.payload.key;\n }\n }\n\n//Build the mesage for the HAT display and send it\nmsg.color = textColor;\nmsg.background = bgColor;\nmsg.payload = jSw;\nreturn msg;","outputs":1,"noerr":0,"x":494,"y":97,"wires":[["9fba2057.6045e"]]},{"id":"8567e4cc.7a9818","type":"http request","z":"f37e2664.0c81d8","name":"Get Toast Level","method":"GET","ret":"txt","url":"http://www.universalhub.com/toast.xml","tls":"","x":295,"y":460,"wires":[["4407a0ed.bbf86"]]},{"id":"73235282.8cdcac","type":"inject","z":"f37e2664.0c81d8","name":"Poll Weather Info","topic":"","payload":"","payloadType":"date","repeat":"900","crontab":"","once":true,"x":107,"y":513,"wires":[["2900efcb.d6ff1","8567e4cc.7a9818"]]},{"id":"4407a0ed.bbf86","type":"xml","z":"f37e2664.0c81d8","name":"","attr":"","chr":"","x":446,"y":459,"wires":[["911b7ce8.6ee48"]]},{"id":"420219ef.bdfde8","type":"rpi-sensehat out","z":"f37e2664.0c81d8","name":"HAT Display","x":843,"y":535,"wires":[]},{"id":"2900efcb.d6ff1","type":"http request","z":"f37e2664.0c81d8","name":"Get NTK Weather","method":"GET","ret":"obj","url":"https://api.forecast.io/forecast/a61bcdbf0597676aa17b117a7b3582f2/42.2627,-71.347?exclude=minutely,hourly,daily","tls":"","x":300,"y":564,"wires":[["911b7ce8.6ee48"]]},{"id":"f6b4c6de.094b38","type":"function","z":"f37e2664.0c81d8","name":"Process alerts","func":"//This function pulls alerts out of a merged \n// forecast.io data object and French Toast JSON object \n// (converted from XML)and converts\n// the array of alerts into a string, annotates the message for \n// background and text color, and\n// returns that string as the payload\n\nvar numAlerts =0;\nvar currentAlerts =[];\nvar alertString = \"\";\nvar bgColor = \"off\";\nvar textColor = \"white\";\nvar levelFT = String(msg.payload.frenchtoast.status);\nvar levelChar = levelFT.charAt(0);\n\nalertString = \"FT Level: \" + levelFT + \" \";\n\nswitch (levelFT) {\n case \"low\":\n bgColor = \"off\";\n textColor = \"green\";\n break;\n case \"guarded\":\n bgColor =\"blue\";\n textColor = \"white\";\n break;\n case \"elevated\":\n bgColor =\"yellow\";\n textColor = \"white\";\n break;\n case \"high\":\n bgColor =\"orange\";\n textColor = \"white\";\n break;\n case \"severe\":\n bgColor =\"red\";\n textColor = \"white\";\n break;\n default:\n levelFT = \"Didn't fire - level is \" + levelFT;\n textColor = \"red\";\n}\n//Process Forecast.op alerts\n//Test if alert even exists\n\nif (msg.payload.alerts) {\n currentAlerts = msg.payload.alerts;\n\n // Convert alert array to a single string\n\n numAlerts = msg.payload.alerts.length;\n if (numAlerts > 0) {\n alertString = alertString + \" \" + numAlerts + \" Alerts: \";\n for (i = 0; i < numAlerts; i++) {\n alertString = alertString+ \" \" +currentAlerts[i].title;\n }\n }\n}\n// Put message, color, and background into flow contexts for external use\ncontext.flow.alert = alertString;\ncontext.flow.background = bgColor;\ncontext.flow.text = textColor;\n\n// Build and send message\nmsg.background = bgColor;\nmsg.color = textColor;\nmsg.speed = 2;\nmsg.payload = alertString;\nreturn msg;","outputs":1,"noerr":0,"x":695,"y":475,"wires":[["420219ef.bdfde8"]]},{"id":"911b7ce8.6ee48","type":"join","z":"f37e2664.0c81d8","name":"","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":" ","timeout":"","count":"2","x":529.9999847412109,"y":522.0000076293945,"wires":[["f6b4c6de.094b38"]]},{"id":"8f85aeb3.f81a2","type":"comment","z":"f37e2664.0c81d8","name":"Handle controller inputs","info":"This flow handles inputs generated by the \nSense HAT, including both joystick inputs and \nperiodic environment inputs.","x":140,"y":46,"wires":[]},{"id":"dda41471.ba798","type":"comment","z":"f37e2664.0c81d8","name":"Build Weather Model","info":"This flow gathers alert info from the \nFrench Toast Alerting system and weather\nalerts from forecast.io. These are processed \ninto strings for display, and sets parameters for \ntext and display colors.","x":115,"y":423,"wires":[]},{"id":"eb725482.c09f38","type":"comment","z":"f37e2664.0c81d8","name":"Generate calibration","info":"Try calibration approach \nAmbientTemp - ( (CPUtemp - AmbientTemp) / 2 )","x":317,"y":271,"wires":[]},{"id":"bfe2b6a6.8dace","type":"switch","z":"f37e2664.0c81d8","name":"route HAT messages","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"joystick","vt":"str"},{"t":"eq","v":"environment","vt":"str"},{"t":"eq","v":"motion","vt":"str"}],"checkall":"false","outputs":3,"x":274,"y":137,"wires":[["10a1f00c.ef5e1"],["3327d30c.e1e284","9a9f3507.f85f"],[]]},{"id":"3327d30c.e1e284","type":"function","z":"f37e2664.0c81d8","name":"Process Env","func":"//Code for function node \"Process Env\"\n//\n// This function process \"environment\" topics from \n// the HAT, canculaes any calibration offsets to reflect \n// actual values and updates the flow-specific\n// context variables for use in other flows\n// \nmsgTopic = String(msg.topic)\n//Store calibration point or environment variables depending on topic\nswitch (msgTopic){\n case \"calibration\":\n // Save CPU temp for future offeet calculation\n context.tempOffset = msg.payload;\n break;\n case \"environment\":\n var rawTemp = msg.payload.temperature\n context.flow.hatTemp = rawTemp - ((context.tempOffset - rawTemp)/2);\n context.flow.hatHumidity = msg.payload.humidity;\n context.flow.hatPressure = msg.payload.pressure;\n break;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":653,"y":158,"wires":[["a6e4a562.4de3f"]]},{"id":"9a9f3507.f85f","type":"delay","z":"f37e2664.0c81d8","name":"Limit Calibration","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"4","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":352,"y":207,"wires":[["c1e0f421.995598"]]},{"id":"c1e0f421.995598","type":"exec","z":"f37e2664.0c81d8","command":"vcgencmd","addpay":false,"append":"measure_temp","useSpawn":"","timer":"","name":"Get CPU Temp","x":529,"y":228.5,"wires":[["de8f7379.7bd27"],[],[]]},{"id":"a6e4a562.4de3f","type":"debug","z":"f37e2664.0c81d8","name":"","active":false,"console":"false","complete":"false","x":813,"y":157,"wires":[]},{"id":"de8f7379.7bd27","type":"function","z":"f37e2664.0c81d8","name":"Generate CPU","func":"var cpuString = msg.payload;\ncpuString = cpuString.replace (\"temp=\",'');\nvar tempOffset = parseFloat(cpuString.replace(\"\\'C\\n\",''));\nmsg.topic = \"calibration\";\nmsg.payload = tempOffset;\nreturn msg;","outputs":1,"noerr":0,"x":707,"y":272,"wires":[["3327d30c.e1e284"]]}]